---
interface Props {
  animation: string; // Animation component name to use (e.g., "DecoderText")
  trigger: "in-view" | "loadingScreenEnd" | "hover" | "click"; // Trigger method for the animation
  mobileDisable?: boolean; // Whether to disable animation on mobile
  delay?: number; // Animation delay in ms
  text?: string; // Text content for text-based animations
  // Other common props that might be needed
  className?: string;
  duration?: number;
  charDelay?: number;
  as?: string;
  // Allow rest props using Record type instead of any
  [key: string]: unknown;
}

const { 
  animation, 
  trigger = "in-view", 
  mobileDisable = false,
  delay = 0,
  text = "",
  ...restProps 
} = Astro.props;

// Import the animation component dynamically based on the animation prop
const animationComponents = {
  "DecoderText": (await import('./DecoderText.astro')).default,
  // Add more animations here as they are created
};

const AnimationComponent = animationComponents[animation];

// Error checking
if (!AnimationComponent) {
  throw new Error(`Animation component "${animation}" not found`);
}
---

<div 
  class:list={["animation-wrapper", { "mobile-disabled": mobileDisable }]} 
  data-animation={animation}
  data-trigger={trigger}
  data-delay={delay}
>
  {animation === "DecoderText" ? (
    <AnimationComponent text={text} delay={delay} {...restProps} />
  ) : (
    <AnimationComponent {...restProps} />
  )}
</div>

<script>
  // Global observer instances to manage cleanup
  let globalObservers: IntersectionObserver[] = [];
  let loadingScreenListeners: Array<{element: HTMLElement, listener: EventListener}> = [];
  
  // Setup all animation wrappers
  function setupAnimationWrappers() {
    const wrappers = document.querySelectorAll<HTMLElement>('.animation-wrapper');
    
    wrappers.forEach(wrapper => {
      const trigger = wrapper.dataset.trigger;
      const mobileDisabled = wrapper.classList.contains('mobile-disabled');
      
      // Skip setup if animations are disabled on mobile and device is mobile
      if (mobileDisabled && window.innerWidth < 768) {
        return;
      }
      
      // Reset animation state for view transitions
      resetAnimationState(wrapper);
      
      // Setup based on trigger type
      switch (trigger) {
        case 'in-view':
          setupInViewTrigger(wrapper);
          break;
        case 'loadingScreenEnd':
          triggerOnLoadingScreenEnd(wrapper);
          break;
        case 'hover':
          setupHoverTrigger(wrapper);
          break;
        case 'click':
          setupClickTrigger(wrapper);
          break;
      }
    });
  }
  
  // Reset animation state to initial hidden state
  function resetAnimationState(wrapper: HTMLElement) {
    const animationElement = wrapper.querySelector('.decoder-text') as HTMLElement;
    if (animationElement) {
      // Reset opacity and clear any existing animations
      animationElement.style.opacity = '0';
      animationElement.style.transition = '';
      
      // Reset character elements back to original characters
      const charElements = animationElement.querySelectorAll<HTMLElement>('.decoder-char');
      charElements.forEach(charElement => {
        const originalChar = charElement.dataset.char || '';
        charElement.textContent = originalChar;
      });
      
      // Mark as not animated
      wrapper.removeAttribute('data-animated');
    }
  }
  
  // Setup IntersectionObserver for in-view triggers
  function setupInViewTrigger(wrapper: HTMLElement) {
    // Skip if already animated (unless it's a new page load)
    if (wrapper.hasAttribute('data-animated')) {
      return;
    }
    
    // Check if element is already in view (past bottom 5% of viewport)
    function checkElementInView(element: HTMLElement): boolean {
      const rect = element.getBoundingClientRect();
      const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
      const triggerPoint = viewportHeight * 0.95; // Bottom 5% of viewport
      
      // Element is in view if its top is above the trigger point
      return rect.top <= triggerPoint;
    }
    
    // Function to trigger animation
    function triggerAnimation() {
      const animationElement = wrapper.querySelector('.decoder-text');
      if (animationElement && !wrapper.hasAttribute('data-animated')) {
        // Mark as animated to prevent re-triggering
        wrapper.setAttribute('data-animated', 'true');
        
        // Trigger the animation by dispatching a custom event
        const event = new CustomEvent('trigger-animation');
        animationElement.dispatchEvent(event);
        
        // Disconnect observer since we only need to trigger once per page load
        observer.disconnect();
      }
    }
    
    // Check immediately if element is already in view
    if (checkElementInView(wrapper)) {
      // Use small delay to ensure DOM is ready
      setTimeout(triggerAnimation, 50);
      return;
    }
    
    // Set up observer for elements not currently in view
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Use our custom check instead of relying on isIntersecting
        if (checkElementInView(entry.target as HTMLElement)) {
          triggerAnimation();
        }
      });
    }, { 
      // Use threshold of 0 and rely on our custom viewport check
      threshold: 0,
      // Add some margin to catch elements before they're fully visible
      rootMargin: '50px 0px 0px 0px'
    });
    
    observer.observe(wrapper);
    globalObservers.push(observer);
  }
  
  // Trigger when loading screen ends
  function triggerOnLoadingScreenEnd(wrapper: HTMLElement) {
    // Clean up existing listener if it exists
    const existingListener = loadingScreenListeners.find(l => l.element === wrapper);
    if (existingListener) {
      document.removeEventListener('loading-screen-end', existingListener.listener as EventListener);
      document.removeEventListener('loadingScreenComplete', existingListener.listener as EventListener);
    }
    
    const listener = () => {
      const animationElement = wrapper.querySelector('.decoder-text');
      if (animationElement && !wrapper.hasAttribute('data-animated')) {
        wrapper.setAttribute('data-animated', 'true');
        const event = new CustomEvent('trigger-animation');
        animationElement.dispatchEvent(event);
      }
    };
    
    // Listen to both event names for compatibility
    document.addEventListener('loading-screen-end', listener);
    document.addEventListener('loadingScreenComplete', listener);
    loadingScreenListeners.push({ element: wrapper, listener });
  }
  
  // Setup hover trigger (can be re-triggered)
  function setupHoverTrigger(wrapper: HTMLElement) {
    const existingListener = wrapper.getAttribute('data-hover-setup');
    if (existingListener) return; // Already setup
    
    wrapper.setAttribute('data-hover-setup', 'true');
    wrapper.addEventListener('mouseenter', () => {
      const animationElement = wrapper.querySelector('.decoder-text');
      if (animationElement) {
        // Allow hover animations to re-trigger
        resetAnimationState(wrapper);
        const event = new CustomEvent('trigger-animation');
        animationElement.dispatchEvent(event);
      }
    });
  }
  
  // Setup click trigger (can be re-triggered)  
  function setupClickTrigger(wrapper: HTMLElement) {
    const existingListener = wrapper.getAttribute('data-click-setup');
    if (existingListener) return; // Already setup
    
    wrapper.setAttribute('data-click-setup', 'true');
    wrapper.addEventListener('click', () => {
      const animationElement = wrapper.querySelector('.decoder-text');
      if (animationElement) {
        // Allow click animations to re-trigger
        resetAnimationState(wrapper);
        const event = new CustomEvent('trigger-animation');
        animationElement.dispatchEvent(event);
      }
    });
  }
  
  // Cleanup function for view transitions
  function cleanupAnimations() {
    // Disconnect all observers
    globalObservers.forEach(observer => observer.disconnect());
    globalObservers = [];
    
    // Clear loading screen listeners
    loadingScreenListeners.forEach(({ listener }) => {
      document.removeEventListener('loading-screen-end', listener as EventListener);
      document.removeEventListener('loadingScreenComplete', listener as EventListener);
    });
    loadingScreenListeners = [];
  }
  
  // Initialize animations
  function initializeAnimations() {
    // Small delay to ensure DOM is fully ready
    setTimeout(() => {
      setupAnimationWrappers();
    }, 10);
  }
  
  // Setup for initial page load and view transitions
  document.addEventListener('DOMContentLoaded', initializeAnimations);
  
  // Handle view transitions
  document.addEventListener('astro:before-swap', cleanupAnimations);
  document.addEventListener('astro:after-swap', initializeAnimations);
</script>

<style>
  .animation-wrapper {
    display: inline-block;
  }
  
  /* When mobile-disabled is true and screen is small */
  @media (max-width: 768px) {
    .mobile-disabled > :global(.decoder-text) {
      opacity: 1 !important;
    }
  }
</style> 
---
// Component to control terminal effects visibility
import { Icon } from 'astro-icon/components';

// Define effects controls as a JSON object
interface EffectControl {
  id: string;
  label: string;
  dataEffect: string;
  defaultChecked: boolean;
}

const effectControls: EffectControl[] = [
  {
    id: 'noise-effect',
    label: 'CRT Noise',
    dataEffect: 'noise',
    defaultChecked: true
  },
  {
    id: 'scanline-effect',
    label: 'Scanlines',
    dataEffect: 'scanline',
    defaultChecked: true
  },
  {
    id: 'overlay-effect',
    label: 'CRT Overlay',
    dataEffect: 'overlay',
    defaultChecked: true
  }
];
---

<div class="terminal-effects-controls">
  <h3 class="text-terminal-500 text-lg font-bold mb-3">Terminal Effects</h3>
  
  <div class="flex flex-col gap-2">
    {effectControls.map(effect => (
      <div class="flex items-center px-4 py-2 bg-terminal-bg-secondary border-2 border-terminal-300">
        <div class="custom-checkbox-container mr-3">
          <input 
            type="checkbox" 
            id={effect.id} 
            class="effect-toggle sr-only"
            data-effect={effect.dataEffect}
            checked={effect.defaultChecked}
          />
          <label 
            for={effect.id} 
            class="custom-checkbox flex items-center justify-center w-4 h-4 border border-terminal-400 bg-terminal-bg-secondary cursor-pointer transition-colors hover:border-terminal-500"
          >
            <Icon name="tabler:check" class="w-3 h-3 text-terminal-500 opacity-0 transition-opacity check-icon" />
          </label>
        </div>
        <label for={effect.id} class="text-terminal-500 font-uav-mono text-xs cursor-pointer select-none no-glow">{effect.label}</label>
      </div>
    ))}
  </div>
</div>

<script>
  function setupTerminalEffectsControls() {
    const toggles = document.querySelectorAll('.effect-toggle');
    
    // Load saved preferences
    toggles.forEach(toggle => {
      const effectName = toggle.getAttribute('data-effect');
      const savedState = localStorage.getItem(`terminal-effect-${effectName}`);
      
      // If we have a saved state, apply it
      if (savedState !== null) {
        const isEnabled = savedState === 'true';
        const toggleInput = toggle as HTMLInputElement;
        toggleInput.checked = isEnabled;
        updateCheckboxUI(toggleInput);
        updateEffectVisibility(effectName, isEnabled);
      } else {
        // Initialize UI for default checked status
        updateCheckboxUI(toggle as HTMLInputElement);
      }
    });
    
    // Add event listeners to toggles
    toggles.forEach(toggle => {
      toggle.addEventListener('change', (e) => {
        const target = e.currentTarget as HTMLInputElement;
        const effectName = target.getAttribute('data-effect');
        const isEnabled = target.checked;
        
        // Update the checkbox UI
        updateCheckboxUI(target);
        
        // Update the effect visibility
        updateEffectVisibility(effectName, isEnabled);
        
        // Save the preference
        localStorage.setItem(`terminal-effect-${effectName}`, isEnabled.toString());
      });
    });
  }
  
  // Update custom checkbox appearance based on checked state
  function updateCheckboxUI(checkbox: HTMLInputElement) {
    const checkIcon = checkbox.nextElementSibling?.querySelector('.check-icon');
    if (checkIcon) {
      if (checkbox.checked) {
        checkIcon.classList.remove('opacity-0');
        checkIcon.classList.add('opacity-100');
      } else {
        checkIcon.classList.remove('opacity-100');
        checkIcon.classList.add('opacity-0');
      }
    }
  }
  
  function updateEffectVisibility(effectName, isEnabled) {
    const effectElement = document.querySelector(`.terminal-overlay .${effectName}`);
    if (effectElement) {
      if (isEnabled) {
        effectElement.classList.remove('hidden');
      } else {
        effectElement.classList.add('hidden');
      }
    }
  }

  // Set up controls on initial load and on navigation
  document.addEventListener('astro:page-load', setupTerminalEffectsControls);
</script>

<style>
  /* Custom checkbox container */
  .custom-checkbox-container {
    position: relative;
    display: inline-block;
  }
  
  /* Custom checkbox appearance */
  .custom-checkbox {
    transition: all 0.2s ease-in-out;
  }
  
  /* Checked state */
  .effect-toggle:checked + .custom-checkbox {
    background-color: var(--terminal-bg-accent);
    border-color: var(--terminal-bright);
  }
  
  /* Focus state for accessibility */
  .effect-toggle:focus + .custom-checkbox {
    box-shadow: 0 0 0 2px rgba(var(--terminal-bright-rgb), 0.3);
  }
  
  /* Hover state */
  .custom-checkbox:hover {
    border-color: var(--terminal-500);
  }
  
  /* Explicitly disable glow effects */
  .no-glow {
    text-shadow: none !important;
    box-shadow: none !important;
    filter: none !important;
  }
</style> 